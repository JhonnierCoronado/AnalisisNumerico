}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia espacial
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia espacial
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia espacial
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia espacial
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia espacial
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
#Graficar lineas centrales
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
#Graficar las rectas que atraviesan
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
#Graficar las rectas que atraviesan
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
#Graficar las rectas que atraviesan
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
parametrizacion = function(t, P, A){
x = 0
y = 0
valor = seq(-max(t), max(t), t[2] - t[1])
x = P[1] + t * A[1]
y = P[2] + t * A[2]
plot(x, y)
}
t = seq(-1, 10, 0.5)
P = c(1,2)
A = c(-3,5)
parametrizacion(t, P, A)
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
#Graficar las rectas que atraviesan
segments(-max(r) + 0.5, -max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, col="blue")
segments(-max(r) + 0.5, max(r) - 0.5, max(r) - 0.5, max(r) + 0.5, col="blue")
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
f_i = aux * sin(angulo)
circun = aux * cos(angulo)
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
#Graficar las rectas que atraviesan
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
#par(new=TRUE)
r2 = 2 - exp(dimension)
Polar(dimension, r2, "orange")
parametrizacion = function(t, P, A){
x = 0
y = 0
valor = seq(-max(t), max(t), t[2] - t[1])
x = P[1] + t * A[1]
y = P[2] + t * A[2]
plot(x, y, type = "b")
}
t = seq(-1, 10, 0.5)
P = c(1,2)
A = c(-3,5)
parametrizacion(t, P, A)
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
#Graficar la circunferencia
points(circun, f_i, pch="-", col="blue", cex = 0.3)
text(axisX + 0.2, -0.2, axisX, col="blue")
axisX = axisX + 1
aux = aux - 1
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
#Graficar las rectas que atraviesan
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
rm(list=ls())
Polar = function(theta, r, color){
x = 0
y = 0
axisX = 1
for (i in 1:length(r)) {
if (is.nan(r[i]) == TRUE){
r[i] = 0
}
}
angulo = seq(-max(theta), max(theta), theta[2] - theta[1])
x = r * cos(theta)
y = r * sin(theta)
plot(c(-max(r), max(r)), c(-max(r), max(r)), xlab = "Radio", ylab = "Radio")
aux = max(r)
while (aux > 0) {
}
abline(v=((max(circun) + min(circun)) / 2), col="blue")
abline(h=((max(circun) + min(circun)) / 2), col="blue")
#Graficar las rectas que atraviesan
points(x, y, pch = 20, col = color, cex = 1)
}
dimension = seq(-pi, pi, pi/300)
r = 1 - 2*cos(dimension)
Polar(dimension, r, "green")
