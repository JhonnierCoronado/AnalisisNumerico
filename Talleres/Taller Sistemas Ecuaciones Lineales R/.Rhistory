}
return(M)
}
M = matrix(c(2,3,4,1,2,3,5,6,7), nrow = 3)
print("M: ")
print(M)
print("Tril M: ")
print(trilManual(M, k = 1))
#Suponemos que el determinante de A != 0
numeroMultiplicaciones = function(A, b){
multiplicacion = 0
n = nrow(A)
Ab = cbind(A, b)
print(Ab)
}
#Suponemos que el determinante de A != 0
numeroMultiplicaciones = function(A, b){
multiplicacion = 0
n = nrow(A)
Ab = cbind(A, b)
print(Ab)
for (i in 1:(n-1)) {
if (Ab[i, i] == 0){
f = which(Ab[i, ] != 0)[1]
Ab[c(i, fila), ] = Ab[c(fila, i), ]
}
for (k in (i+1): n){
Ab[k, ] = Ab[k, ] - Ab[k, i] / Ab[i, i]*Ab[i, ]
multiplicacion = multiplicacion + 2*(ncol(Ab))
}
}
}
#Suponemos que el determinante de A != 0
numeroMultiplicaciones = function(A, b){
multiplicacion = 0
n = nrow(A)
Ab = cbind(A, b)
print(Ab)
for (i in 1:(n-1)) {
if (Ab[i, i] == 0){
f = which(Ab[i, ] != 0)[1]
Ab[c(i, fila), ] = Ab[c(fila, i), ]
}
for (k in (i+1): n){
Ab[k, ] = Ab[k, ] - Ab[k, i] / Ab[i, i]*Ab[i, ]
multiplicacion = multiplicacion + 2*(ncol(Ab))
}
}
x = rep(NA, times = n)
x[n] = Ab[n, n+1] / Ab[n, n]
multiplicacion = multiplicacion + n + 1
for (i in (n-1):1){
x[i] = (Ab[i, n+1] - sum(Ab[i, (i+1):n] * x[(i+1):n])) / Ab[i, i]
multiplicacion = multiplicacion + 2*(n-2)
}
cat("Numero de multiplicaciones: ", multiplicacion, "\n")
return(x)
}
#Suponemos que el determinante de A != 0
numeroMultiplicaciones = function(A, b){
multiplicacion = 0
n = nrow(A)
Ab = cbind(A, b)
print(Ab)
for (i in 1:(n-1)) {
if (Ab[i, i] == 0){
f = which(Ab[i, ] != 0)[1]
Ab[c(i, fila), ] = Ab[c(fila, i), ]
}
for (k in (i+1): n){
Ab[k, ] = Ab[k, ] - Ab[k, i] / Ab[i, i]*Ab[i, ]
multiplicacion = multiplicacion + 2*(ncol(Ab))
}
}
x = rep(NA, times = n)
x[n] = Ab[n, n+1] / Ab[n, n]
multiplicacion = multiplicacion + n + 1
for (i in (n-1):1){
x[i] = (Ab[i, n+1] - sum(Ab[i, (i+1):n] * x[(i+1):n])) / Ab[i, i]
multiplicacion = multiplicacion + 2*(n-2)
}
cat("Numero de multiplicaciones: ", multiplicacion, "\n")
return(x)
}
A = matrix(c( 0, 2, 3, 3, 3,
-5, -4, 1, 4, 5,
0, 0, 0, 3, 7,
-4, -7, -8, 9,7,
3, 4, 5, 5, 6), nrow=5, byrow=TRUE)
b = matrix(c(1,0,0,0,1), nrow=5, byrow=TRUE)
print(numeroMultiplicaciones(A, b))
#Suponemos que el determinante de A != 0
numeroMultiplicaciones = function(A, b){
multiplicacion = 0
n = nrow(A)
Ab = cbind(A, b)
print(Ab)
for (i in 1:(n-1)) {
if (Ab[i, i] == 0){
f = which(Ab[i, ] != 0)[1]
Ab[c(i, f), ] = Ab[c(f, i), ]
}
for (k in (i+1): n){
Ab[k, ] = Ab[k, ] - Ab[k, i] / Ab[i, i]*Ab[i, ]
multiplicacion = multiplicacion + 2*(ncol(Ab))
}
}
x = rep(NA, times = n)
x[n] = Ab[n, n+1] / Ab[n, n]
multiplicacion = multiplicacion + n + 1
for (i in (n-1):1){
x[i] = (Ab[i, n+1] - sum(Ab[i, (i+1):n] * x[(i+1):n])) / Ab[i, i]
multiplicacion = multiplicacion + 2*(n-2)
}
cat("Numero de multiplicaciones: ", multiplicacion, "\n")
return(x)
}
A = matrix(c( 0, 2, 3, 3, 3,
-5, -4, 1, 4, 5,
0, 0, 0, 3, 7,
-4, -7, -8, 9,7,
3, 4, 5, 5, 6), nrow=5, byrow=TRUE)
b = matrix(c(1,0,0,0,1), nrow=5, byrow=TRUE)
print(numeroMultiplicaciones(A, b))
#Suponemos que el determinante de A != 0
numeroMultiplicaciones = function(A, b){
multiplicacion = 0
n = nrow(A)
Ab = cbind(A, b)
print(Ab)
for (i in 1:(n-1)) {
if (Ab[i, i] == 0){
f = which(Ab[i, ] != 0)[1]
Ab[c(i, f), ] = Ab[c(f, i), ]
}
for (k in (i+1): n){
Ab[k, ] = Ab[k, ] - Ab[k, i] / Ab[i, i]*Ab[i, ]
multiplicacion = multiplicacion + 2*(ncol(Ab))
}
}
x = rep(NA, times = n)
x[n] = Ab[n, n+1] / Ab[n, n]
multiplicacion = multiplicacion + n + 1
for (i in (n-1):1){
x[i] = (Ab[i, n+1] - sum(Ab[i, (i+1):n] * x[(i+1):n])) / Ab[i, i]
multiplicacion = multiplicacion + 2*(n-2)
}
cat("Numero de multiplicaciones: ", multiplicacion, "\n")
return(x)
}
A = matrix(c( 0, 2, 3, 3, 3,
-5, -4, 1, 4, 5,
0, 0, 0, 3, 7,
-4, -7, -8, 9,7,
3, 4, 5, 5, 6), nrow=5, byrow=TRUE)
b = matrix(c(1,0,0,0,1), nrow=5, byrow=TRUE)
print(numeroMultiplicaciones(A, b))
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
#alpha > 1 + 1
# 2 > beta + 1
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
#alpha > 1 + 1
# 2 > beta + 1
library("plot3D")
#alpha > 1 + 1
# 2 > beta + 1
library("plot3d")
#alpha > 1 + 1
# 2 > beta + 1
library("plot3D")
#alpha > 1 + 1
# 2 > beta + 1
package("plot3D")
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
install.packages("plot3")
install.packages("plot3D")
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
x = 0
y = 0
z = 0
diagonal = function(M){
M[col(M)!=row(M)]= 0
return(M)
}
MetodoJacobi3D = function(A, b, x0, tol){
xk = matrix(x0)
D = diagonal(A)
L = tril(A, k = -1, diag = FALSE)
U = triu(A, k = 1, diag = FALSE)
contador = 0
repeat{
i = matrix(b - ((L+U)%*%xk))
D1 = solve(D)
xk1 = D1%*%i
cat("Error: ", contador, " ", norm(xk1-xk, "F") / norm(xk), "\n")
xk = xk1
x[[contador]] = x_k[1]
y[[contador]] = x_k[2]
z[[contador]] = x_k[3]
cat("Solucion iteracion ",contador,": ",x[[contador]]," ",y[[contador]]," ",z[[contador]],"\n")
}
}
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
x = 0
y = 0
z = 0
diagonal = function(M){
M[col(M)!=row(M)]= 0
return(M)
}
MetodoJacobi3D = function(A, b, x0, tol){
xk = matrix(x0)
D = diagonal(A)
L = tril(A, k = -1, diag = FALSE)
U = triu(A, k = 1, diag = FALSE)
contador = 0
repeat{
i = matrix(b - ((L+U)%*%xk))
D1 = solve(D)
xk1 = D1%*%i
cat("Error: ", contador, " ", norm(xk1-xk, "F") / norm(xk), "\n")
xk = xk1
x[[contador]] = x_k[1]
y[[contador]] = x_k[2]
z[[contador]] = x_k[3]
cat("Solucion iteracion ",contador,": ",x[[contador]]," ",y[[contador]]," ",z[[contador]],"\n")
contador = contador + 1
if (contador == tol){
break
}
}
lines3D(x, y, z, colvar = z, col = NULL, add = FALSE, theta = 20, phi = 20)
cat("Solucion: ", tol, " con ", xk, " iteraciones\n")
}
x1 = c(1,2,3)
MetodoJacobi3D(A, B, x1, 10)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
x = 0
y = 0
z = 0
diagonal = function(M){
M[col(M)!=row(M)]= 0
return(M)
}
MetodoJacobi3D = function(A, b, x0, tol){
xk = matrix(x0)
D = diagonal(A)
L = tril(A, k = -1, diag = FALSE)
U = triu(A, k = 1, diag = FALSE)
contador = 0
repeat{
i = matrix(b - ((L+U)%*%xk))
D1 = solve(D)
xk1 = D1%*%i
cat("Error: ", contador, " ", norm(xk1-xk, "F") / norm(xk), "\n")
xk = xk1
x[[contador]] = xk[1]
y[[contador]] = xk[2]
z[[contador]] = xk[3]
cat("Solucion iteracion ",contador,": ",x[[contador]]," ",y[[contador]]," ",z[[contador]],"\n")
contador = contador + 1
if (contador == tol){
break
}
}
lines3D(x, y, z, colvar = z, col = NULL, add = FALSE, theta = 20, phi = 20)
cat("Solucion: ", tol, " con ", xk, " iteraciones\n")
}
x1 = c(1,2,3)
MetodoJacobi3D(A, B, x1, 10)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
x = 0
y = 0
z = 0
diagonal = function(M){
M[col(M)!=row(M)]= 0
return(M)
}
MetodoJacobi3D = function(A, b, x0, tol){
xk = matrix(x0)
D = diagonal(A)
L = tril(A, k = -1, diag = FALSE)
U = triu(A, k = 1, diag = FALSE)
contador = 0
repeat{
i = matrix(b - ((L+U)%*%xk))
D1 = solve(D)
xk1 = D1%*%i
cat("Error: ", contador, " ", norm(xk1-xk, "F") / norm(xk), "\n")
xk = xk1
x[[contador]] = xk[1]
y[[contador]] = xk[2]
z[[contador]] = xk[3]
cat("Solucion iteracion ",contador,": ",x[[contador]]," ",y[[contador]]," ",z[[contador]],"\n")
contador = contador + 1
if (contador == tol){
break
}
}
lines3D(x, y, z, colvar = z, col = NULL, add = FALSE, theta = 20, phi = 20)
cat("Solucion: ", tol, " con ", contador, " iteraciones\n")
}
x1 = c(1,2,3)
MetodoJacobi3D(A, B, x1, 10)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
x = 0
y = 0
z = 0
diagonal = function(M){
M[col(M)!=row(M)]= 0
return(M)
}
MetodoJacobi3D = function(A, b, x0, tol){
xk = matrix(x0)
D = diagonal(A)
L = tril(A, k = -1, diag = FALSE)
U = triu(A, k = 1, diag = FALSE)
contador = 0
repeat{
i = matrix(b - ((L+U)%*%xk))
D1 = solve(D)
xk1 = D1%*%i
cat("Error: ", contador, " ", norm(xk1-xk, "F") / norm(xk), "\n")
xk = xk1
x[[contador]] = xk[1]
y[[contador]] = xk[2]
z[[contador]] = xk[3]
cat("Solucion iteracion ",contador,": ",x[[contador]]," ",y[[contador]]," ",z[[contador]],"\n")
contador = contador + 1
if (contador == tol){
break
}
}
lines3D(x, y, z, colvar = z, col = NULL, add = FALSE, theta = 20, phi = 20)
cat("Solucion: ", tol, " con ", xk, " iteraciones\n")
}
x1 = c(1,2,3)
MetodoJacobi3D(A, B, x1, 10)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
x = 0
y = 0
z = 0
diagonal = function(M){
M[col(M)!=row(M)]= 0
return(M)
}
MetodoJacobi3D = function(A, b, x0, tol){
xk = matrix(x0)
D = diagonal(A)
L = tril(A, k = -1, diag = FALSE)
U = triu(A, k = 1, diag = FALSE)
contador = 0
repeat{
i = matrix(b - ((L+U)%*%xk))
D1 = solve(D)
xk1 = D1%*%i
cat("Error: ", contador, " ", norm(xk1-xk, "F") / norm(xk), "\n")
xk = xk1
x[[contador]] = xk[1]
y[[contador]] = xk[2]
z[[contador]] = xk[3]
cat("Solucion iteracion ",contador,": ",x[[contador]]," ",y[[contador]]," ",z[[contador]],"\n")
contador = contador + 1
if (contador == tol){
break
}
}
lines3D(x, y, z, colvar = z, col = NULL, add = FALSE, theta = 20, phi = 20)
cat("Solucion: ", tol, " con ", xk, " iteraciones\n")
}
x1 = c(1,2,3)
MetodoJacobi3D(A, B, x1, 10)
#alpha > 1 + 1
# 2 > beta + 1
library(plot3D)
beta = 0
alpha = 3
A = matrix(c(2, 0, 1,
beta,2 , -1,
-1, 1, alpha), nrow=3, byrow=TRUE)
B = matrix (c(1,2,1),nrow=3, byrow=TRUE)
Ab = cbind(A,B)
print(Ab)
x = 0
y = 0
z = 0
diagonal = function(M){
M[col(M)!=row(M)]= 0
return(M)
}
MetodoJacobi3D = function(A, b, x0, tol){
xk = matrix(x0)
D = diagonal(A)
L = tril(A, k = -1, diag = FALSE)
U = triu(A, k = 1, diag = FALSE)
contador = 0
repeat{
i = matrix(b - ((L+U)%*%xk))
D1 = solve(D)
xk1 = D1%*%i
cat("Error: ", contador, " ", norm(xk1-xk, "F") / norm(xk), "\n")
xk = xk1
x[[contador]] = xk[1]
y[[contador]] = xk[2]
z[[contador]] = xk[3]
cat("Solucion iteracion ",contador,": ",x[[contador]]," ",y[[contador]]," ",z[[contador]],"\n")
contador = contador + 1
if (contador == tol){
break
}
}
lines3D(x, y, z, colvar = z, col = NULL, add = FALSE, theta = 20, phi = 20)
cat("Solucion: ", tol, " con ", xk, " iteraciones\n")
}
x1 = c(1,2,3)
MetodoJacobi3D(A, B, x1, 10)
